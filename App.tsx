import { initLlama, LlamaContext } from "@pocketpalai/llama.rn";
import React, { useEffect, useState } from "react";
import { ActivityIndicator, Button, SafeAreaView, ScrollView, StyleSheet, Text, TextInput, View } from "react-native"; // –î–æ–±–∞–≤–ª—è–µ–º ActivityIndicator –∏ StyleSheet
import { borderRadius, colors, spacing, typography } from './src/styles/theme'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∏–ª–∏
import { getLlamaModelPath, getOptimizedLlamaInitParams } from './src/utils/llamaUtils';

export default function App() {
  const [log, setLog] = useState("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...\n");
  const [downloadProgress, setDownloadProgress] = useState<number>(0);
  const [restartKey, setRestartKey] = useState(0);
  const [llamaContext, setLlamaContext] = useState<LlamaContext | null>(null);
  const [streamingText, setStreamingText] = useState("");
  const [promptInput, setPromptInput] = useState(""); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞

  const append = (msg: string) => setLog((l) => l + msg + "\n");

  useEffect(() => {
    (async () => {
      try {
        append("üîç debug: —Å—Ç–∞—Ä—Ç useEffect");

        append("–ó–∞–≥—Ä—É–∂–∞—é –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ Llama...");
        const modelPath = await getLlamaModelPath((progress) => {
          setDownloadProgress(progress);
        });

        if (!modelPath) {
          append("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ Llama.");
          return;
        }

        append("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –º–æ–¥–µ–ª—å Llama...");
        const t0 = Date.now();
        const optimizedParams = await getOptimizedLlamaInitParams();
        const ctx = await initLlama(
          {
            model: modelPath,
            ...optimizedParams,
            use_progress_callback: true,
          },
          (_progress: number) => {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            // console.log('progress: ', _progress);
          },
        );
        const t1 = Date.now();
        append(`–ú–æ–¥–µ–ª—å Llama –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ ${t1 - t0} –º—Å.`);
        setLlamaContext(ctx);
        append("–ú–æ–¥–µ–ª—å Llama —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!");

      } catch (err:any) {
        append("Fatal error: " + (err.message || String(err)));
      }
    })();
  }, [restartKey]);

  return (
    <SafeAreaView style={styles.container}> {/* –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ */}
      <ScrollView contentContainerStyle={styles.scrollViewContent}> {/* –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —Å–∫—Ä–æ–ª–ª–∞ */}
        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ */}
        {!llamaContext && (
          <View style={styles.loadingContainer}>
            <ActivityIndicator size="large" color={colors.primary} />
            <Text style={[typography.body, { marginTop: spacing.medium, color: colors.textSecondary }]}>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏...</Text>
            {downloadProgress > 0 && !isNaN(downloadProgress) && (
              <Text style={[typography.small, { marginTop: spacing.small, color: colors.textSecondary }]}>–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏: {downloadProgress.toFixed(0)}%</Text>
            )}
          </View>
        )}

        {/* –õ–æ–≥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–∫–∞, –ø–æ—Ç–æ–º —É–¥–∞–ª–∏—Ç—å) */}
        {/* <Text style={{ fontFamily: "monospace" }}>{log}</Text> */}
        {/* {downloadProgress > 0 && !isNaN(downloadProgress) && <Text style={{ fontFamily: "monospace", marginTop: 5 }}>–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏: {downloadProgress.toFixed(0)}%</Text>} */}

        {llamaContext && (
          <View style={styles.chatContainer}> {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —á–∞—Ç–∞ */}

            {/* –ó–¥–µ—Å—å –±—É–¥—É—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ */}
            <Text style={styles.messageText}>{streamingText}</Text> {/* –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç */}

            <View style={styles.inputContainer}> {/* –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∏ */}
              <TextInput
                style={styles.textInput} // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ –∫ TextInput
                onChangeText={setPromptInput}
                value={promptInput}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–ø—Ç –∑–¥–µ—Å—å..."
                placeholderTextColor={colors.textSecondary}
                editable={!!llamaContext}
              />
              <Button
                title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
                onPress={async () => {
                  if (!llamaContext || !promptInput.trim()) return;
                  append("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç —Å Llama..."); // –ú–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                  setStreamingText("");
                  try {
                    const userPrompt = promptInput;
                    const formattedPrompt = `<|im_start|>system\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\n<|im_start|>user\n${userPrompt}<|im_end|>\n<|im_start|>assistant\n`;

                    const completionParams = {
                      prompt: formattedPrompt,
                      n_predict: 200,
                      temperature: 0.7,
                      stop: ["<|im_end|>", "<|im_start|>assistant", "\n"],
                    };
                    let acc = "";
                    let lastText = "";
                    const result = await llamaContext.completion(completionParams, (partialText) => {
                      const currentPartial = (typeof partialText === 'object' && partialText !== null) ? (partialText.content ?? partialText.output_text ?? partialText.text ?? JSON.stringify(partialText)) : partialText;
                      const newPart = currentPartial.slice(lastText.length);
                      acc += newPart;
                      setStreamingText(prev => prev + newPart);
                      lastText = currentPartial;
                    });
                    // –í–º–µ—Å—Ç–æ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ FINAL (completion), —É–±–µ–¥–∏–º—Å—è, —á—Ç–æ streamingText —É–∂–µ –ø–æ–ª–Ω—ã–π
                    if (streamingText.trim() !== (result.completion || result.text || "").trim()) {
                      // –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ streamingText –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç, –æ–±–Ω–æ–≤–∏–º –µ–≥–æ
                      setStreamingText(result.completion || result.text || JSON.stringify(result) || "");
                    }
                    append("FINAL (completion) –ø–æ–ª—É—á–µ–Ω–æ."); // –û—Ç–ª–∞–¥–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    setPromptInput("");
                  } catch (e: any) {
                    append("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å Llama: " + (e.message || String(e)));
                  }
                }}
                disabled={!llamaContext || !promptInput.trim()}
                color={colors.primary} // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
              />
            </View>
          </View>
        )}
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
  },
  scrollViewContent: {
    flexGrow: 1,
    justifyContent: 'space-between',
    padding: spacing.medium,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  chatContainer: {
    flex: 1,
    justifyContent: 'flex-end',
  },
  messageText: {
    ...typography.body,
    backgroundColor: colors.cardBackground,
    borderRadius: borderRadius.medium,
    padding: spacing.medium,
    marginBottom: spacing.small,
    alignSelf: 'flex-start', // –î–ª—è –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ–ª–∏
    maxWidth: '80%',
  },
  inputContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingTop: spacing.medium,
    borderTopWidth: 1,
    borderTopColor: colors.inputBorder,
  },
  textInput: {
    flex: 1,
    height: 50,
    borderColor: colors.inputBorder,
    borderWidth: 1,
    borderRadius: borderRadius.medium,
    paddingHorizontal: spacing.medium,
    marginRight: spacing.small,
    ...typography.body,
    backgroundColor: colors.cardBackground,
  },
});
