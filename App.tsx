import { initLlama, LlamaContext } from "@pocketpalai/llama.rn";
import React, { useEffect, useState } from "react";
import { Button, SafeAreaView, ScrollView, Text, TextInput, View } from "react-native";
import { getLlamaModelPath, getOptimizedLlamaInitParams } from './src/utils/llamaUtils';

export default function App() {
  const [log, setLog] = useState("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...\n");
  const [downloadProgress, setDownloadProgress] = useState<number>(0);
  const [restartKey, setRestartKey] = useState(0);
  const [llamaContext, setLlamaContext] = useState<LlamaContext | null>(null);
  const [streamingText, setStreamingText] = useState("");
  const [promptInput, setPromptInput] = useState(""); // –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–ø—Ç–∞

  const append = (msg: string) => setLog((l) => l + msg + "\n");

  useEffect(() => {
    (async () => {
      try {
        append("üîç debug: —Å—Ç–∞—Ä—Ç useEffect");

        append("–ó–∞–≥—Ä—É–∂–∞—é –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ Llama...");
        const modelPath = await getLlamaModelPath((progress) => {
          setDownloadProgress(progress);
        });

        if (!modelPath) {
          append("–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ Llama.");
          return;
        }

        append("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é –º–æ–¥–µ–ª—å Llama...");
        const t0 = Date.now();
        const optimizedParams = await getOptimizedLlamaInitParams();
        const ctx = await initLlama(
          {
            model: modelPath,
            ...optimizedParams,
            use_progress_callback: true,
          },
          (_progress: number) => {
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            // console.log('progress: ', _progress);
          },
        );
        const t1 = Date.now();
        append(`–ú–æ–¥–µ–ª—å Llama –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞ ${t1 - t0} –º—Å.`);
        setLlamaContext(ctx);
        append("–ú–æ–¥–µ–ª—å Llama —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!");

      } catch (err:any) {
        append("Fatal error: " + (err.message || String(err)));
      }
    })();
  }, [restartKey]);

  return (
    <SafeAreaView style={{ flex: 1, padding: 16 }}>
      <ScrollView>
        <Text style={{ fontFamily: "monospace" }}>{log}</Text>
        {downloadProgress > 0 && !isNaN(downloadProgress) && <Text style={{ fontFamily: "monospace", marginTop: 5 }}>–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏: {downloadProgress.toFixed(0)}%</Text>}
        {streamingText.length > 0 && <Text style={{ fontFamily: "monospace", marginTop: 5 }}>{streamingText}</Text>}
        {/* –ö–Ω–æ–ø–∫–∞ "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å" —É–±–∏—Ä–∞–µ—Ç—Å—è –∏–ª–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è, –ø–æ–∫–∞ —á—Ç–æ —É–¥–∞–ª—è–µ–º */}
        <Button title="–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å" onPress={() => {
          setLog("üîÅ –†–µ—Å—Ç–∞—Ä—Ç...\n");
          setRestartKey(prevKey => prevKey + 1);
          setStreamingText("");
        }} />



        <View style={{ marginTop: 10 }}>
          <TextInput
            style={{
              height: 40,
              borderColor: 'darkgray',
              borderWidth: 1,
              paddingHorizontal: 8,
              marginBottom: 10,
              borderRadius: 5,
            }}
            onChangeText={setPromptInput}
            value={promptInput}
            placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–ø—Ç –∑–¥–µ—Å—å..."
            editable={!!llamaContext} // –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–æ–∫–∞ –º–æ–¥–µ–ª—å –Ω–µ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è
          />
          <Button
            title="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–ø—Ç (Llama)"
            onPress={async () => {
              if (!llamaContext || !promptInput.trim()) return;
              append("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç —Å Llama...");
              setStreamingText("");
              try {
                const userPrompt = promptInput; // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
                const formattedPrompt = `<|im_start|>system\nYou are Qwen, created by Alibaba Cloud. You are a helpful assistant.<|im_end|>\n<|im_start|>user\n${userPrompt}<|im_end|>\n<|im_start|>assistant\n`;

                const completionParams = {
                  prompt: formattedPrompt,
                  n_predict: 200,
                  temperature: 0.7,
                  stop: ["<|im_end|>", "<|im_start|>assistant", "\n"],
                };
                let acc = "";
                let lastText = "";
                const result = await llamaContext.completion(completionParams, (partialText) => {
                  const currentPartial = (typeof partialText === 'object' && partialText !== null) ? (partialText.content ?? partialText.output_text ?? partialText.text ?? JSON.stringify(partialText)) : partialText;
                  const newPart = currentPartial.slice(lastText.length);
                  acc += newPart;
                  setStreamingText(prev => prev + newPart);
                  lastText = currentPartial;
                });
                append("FINAL (completion): " + (result.completion || result.text || JSON.stringify(result) || "<–ø—É—Å—Ç–æ>"));
                setPromptInput(""); // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
              } catch (e: any) {
                append("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å Llama: " + (e.message || String(e)));
              }
            }}
            disabled={!llamaContext || !promptInput.trim()} // –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –ø–æ–∫–∞ –º–æ–¥–µ–ª—å –Ω–µ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –∏–ª–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –ø—É—Å—Ç–æ
          />
        </View>

        
      </ScrollView>
    </SafeAreaView>
  );
}
